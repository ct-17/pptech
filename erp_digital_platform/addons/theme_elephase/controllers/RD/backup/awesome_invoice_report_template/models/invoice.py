# -*- coding: utf-8 -*-
from openerp import models, fields, api
import math
from openerp.exceptions import ValidationError

try:
    from num2words import num2words
except ImportError:
    raise ValidationError('In order to proceed, please install python module called `num2words`.\n How to install the latest version in Linux/UNIX or Windows System:\n 1. Download it from https://github. com/savoirfairelinux/num2words \n 2. Unzip the downloaded file\n 3. Change directory to the unziped `num2words` folder  and run this command: "python setup.py install"\n')

class AccountInvoice(models.Model):
    _inherit = ["account.invoice"]

    cai_shot = fields.Char("Cai", readonly=True)
    cai_expires_shot = fields.Date("Expiration Date", readonly=True)
    min_number_shot = fields.Char("Min Number", readonly=True)
    max_number_shot = fields.Char("Max Number", readonly=True)
    amount_words = fields.Char('Cantidad  en Letras:', help="The invoice total amount in words is automatically generated by the system..few languages are supported currently", compute='_compute_num2words')
    incoterm_id = fields.Many2one('stock.incoterms', 'Default incoterm for Intrastat',
                                       help="International Commercial Terms are a series of predefined commercial terms used in international transactions.")

    credit_note_reason = fields.Selection([('anulacion','ANULACION'),('devolucion','DEVOLUCIÃ“N'),('descuento','DESCUENTO')],'MOTIVO NOTA DE CREDITO')
    
    @api.one
    def _compute_num2words(self):
        lastnum ,firstnum = math.modf(self.amount_total)
        lastnum = lastnum * 100
        before_float = ''
        try:
            before_float = (num2words(firstnum, lang=self.partner_id.lang) + ' ' + (self.currency_id.currency_name or '')).upper()
        except NotImplementedError:
            before_float = (num2words(firstnum, lang='en') + ' ' + (self.currency_id.currency_name or '')).upper()

        final_number = before_float
        if lastnum:
            final_number += ' con %s/100'%(int(lastnum))
        self.amount_words = final_number.upper()

    _sql_constraints = [
        ('number', 'unique(number)', 'the invoice number must be unique, see sequence settings in the selected journal!')
        ]

    @api.multi
    def invoice_validate(self):
        res = super(AccountInvoice, self).invoice_validate()
        """ La fecha de la factura debe estar en el rango, si se esta usando """
        if self.journal_id.sequence_id.fiscal_regime:
            if self.date_invoice > self.journal_id.sequence_id.expiration_date:
                self.journal_id.sequence_id.number_next_actual = self.journal_id.sequence_id.number_next_actual -1
                raise Warning(_('la fecha de expiracion para esta secuencia es %s ') %(self.journal_id.sequence_id.expiration_date) )
            self.cai_shot=''

            for regimen in self.journal_id.sequence_id.fiscal_regime:
                if regimen.selected:
                    self.cai_shot = regimen.cai.name
                    self.cai_expires_shot = regimen.cai.expiration_date
                    self.min_number_shot = self.journal_id.sequence_id.dis_min_value
                    self.max_number_shot = self.journal_id.sequence_id.dis_max_value
					
        return res

